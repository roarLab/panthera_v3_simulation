// Generated by gencpp from file panthera_locomotion/Motor_health.msg
// DO NOT EDIT!


#ifndef PANTHERA_LOCOMOTION_MESSAGE_MOTOR_HEALTH_H
#define PANTHERA_LOCOMOTION_MESSAGE_MOTOR_HEALTH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panthera_locomotion
{
template <class ContainerAllocator>
struct Motor_health_
{
  typedef Motor_health_<ContainerAllocator> Type;

  Motor_health_()
    : fuse_condition(0.0)  {
    }
  Motor_health_(const ContainerAllocator& _alloc)
    : fuse_condition(0.0)  {
  (void)_alloc;
    }



   typedef double _fuse_condition_type;
  _fuse_condition_type fuse_condition;





  typedef boost::shared_ptr< ::panthera_locomotion::Motor_health_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panthera_locomotion::Motor_health_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_health_

typedef ::panthera_locomotion::Motor_health_<std::allocator<void> > Motor_health;

typedef boost::shared_ptr< ::panthera_locomotion::Motor_health > Motor_healthPtr;
typedef boost::shared_ptr< ::panthera_locomotion::Motor_health const> Motor_healthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panthera_locomotion::Motor_health_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panthera_locomotion::Motor_health_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panthera_locomotion::Motor_health_<ContainerAllocator1> & lhs, const ::panthera_locomotion::Motor_health_<ContainerAllocator2> & rhs)
{
  return lhs.fuse_condition == rhs.fuse_condition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panthera_locomotion::Motor_health_<ContainerAllocator1> & lhs, const ::panthera_locomotion::Motor_health_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panthera_locomotion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::panthera_locomotion::Motor_health_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panthera_locomotion::Motor_health_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panthera_locomotion::Motor_health_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panthera_locomotion::Motor_health_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panthera_locomotion::Motor_health_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panthera_locomotion::Motor_health_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panthera_locomotion::Motor_health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b811d7770caee98dbe252ed8c9b8311";
  }

  static const char* value(const ::panthera_locomotion::Motor_health_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b811d7770caee98ULL;
  static const uint64_t static_value2 = 0xdbe252ed8c9b8311ULL;
};

template<class ContainerAllocator>
struct DataType< ::panthera_locomotion::Motor_health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panthera_locomotion/Motor_health";
  }

  static const char* value(const ::panthera_locomotion::Motor_health_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panthera_locomotion::Motor_health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 fuse_condition\n"
;
  }

  static const char* value(const ::panthera_locomotion::Motor_health_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panthera_locomotion::Motor_health_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fuse_condition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_health_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panthera_locomotion::Motor_health_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panthera_locomotion::Motor_health_<ContainerAllocator>& v)
  {
    s << indent << "fuse_condition: ";
    Printer<double>::stream(s, indent + "  ", v.fuse_condition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHERA_LOCOMOTION_MESSAGE_MOTOR_HEALTH_H
