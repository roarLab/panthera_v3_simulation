// Generated by gencpp from file panthera_locomotion/ICRsearchResponse.msg
// DO NOT EDIT!


#ifndef PANTHERA_LOCOMOTION_MESSAGE_ICRSEARCHRESPONSE_H
#define PANTHERA_LOCOMOTION_MESSAGE_ICRSEARCHRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>

namespace panthera_locomotion
{
template <class ContainerAllocator>
struct ICRsearchResponse_
{
  typedef ICRsearchResponse_<ContainerAllocator> Type;

  ICRsearchResponse_()
    : feasibility(false)
    , wheel_angles()
    , wheel_speeds()  {
    }
  ICRsearchResponse_(const ContainerAllocator& _alloc)
    : feasibility(false)
    , wheel_angles(_alloc)
    , wheel_speeds(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _feasibility_type;
  _feasibility_type feasibility;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _wheel_angles_type;
  _wheel_angles_type wheel_angles;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _wheel_speeds_type;
  _wheel_speeds_type wheel_speeds;





  typedef boost::shared_ptr< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ICRsearchResponse_

typedef ::panthera_locomotion::ICRsearchResponse_<std::allocator<void> > ICRsearchResponse;

typedef boost::shared_ptr< ::panthera_locomotion::ICRsearchResponse > ICRsearchResponsePtr;
typedef boost::shared_ptr< ::panthera_locomotion::ICRsearchResponse const> ICRsearchResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator1> & lhs, const ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator2> & rhs)
{
  return lhs.feasibility == rhs.feasibility &&
    lhs.wheel_angles == rhs.wheel_angles &&
    lhs.wheel_speeds == rhs.wheel_speeds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator1> & lhs, const ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panthera_locomotion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b155cda63f3fb3bd2896ba1fe0ba2d6b";
  }

  static const char* value(const ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb155cda63f3fb3bdULL;
  static const uint64_t static_value2 = 0x2896ba1fe0ba2d6bULL;
};

template<class ContainerAllocator>
struct DataType< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panthera_locomotion/ICRsearchResponse";
  }

  static const char* value(const ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool feasibility\n"
"geometry_msgs/Twist wheel_angles\n"
"geometry_msgs/Twist wheel_speeds\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feasibility);
      stream.next(m.wheel_angles);
      stream.next(m.wheel_speeds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ICRsearchResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panthera_locomotion::ICRsearchResponse_<ContainerAllocator>& v)
  {
    s << indent << "feasibility: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feasibility);
    s << indent << "wheel_angles: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.wheel_angles);
    s << indent << "wheel_speeds: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.wheel_speeds);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHERA_LOCOMOTION_MESSAGE_ICRSEARCHRESPONSE_H
