// Generated by gencpp from file panthera_locomotion/StatusResponse.msg
// DO NOT EDIT!


#ifndef PANTHERA_LOCOMOTION_MESSAGE_STATUSRESPONSE_H
#define PANTHERA_LOCOMOTION_MESSAGE_STATUSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panthera_locomotion
{
template <class ContainerAllocator>
struct StatusResponse_
{
  typedef StatusResponse_<ContainerAllocator> Type;

  StatusResponse_()
    : status(false)
    , speed(0)  {
    }
  StatusResponse_(const ContainerAllocator& _alloc)
    : status(false)
    , speed(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef int64_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::panthera_locomotion::StatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panthera_locomotion::StatusResponse_<ContainerAllocator> const> ConstPtr;

}; // struct StatusResponse_

typedef ::panthera_locomotion::StatusResponse_<std::allocator<void> > StatusResponse;

typedef boost::shared_ptr< ::panthera_locomotion::StatusResponse > StatusResponsePtr;
typedef boost::shared_ptr< ::panthera_locomotion::StatusResponse const> StatusResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panthera_locomotion::StatusResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panthera_locomotion::StatusResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panthera_locomotion::StatusResponse_<ContainerAllocator1> & lhs, const ::panthera_locomotion::StatusResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panthera_locomotion::StatusResponse_<ContainerAllocator1> & lhs, const ::panthera_locomotion::StatusResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panthera_locomotion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::panthera_locomotion::StatusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panthera_locomotion::StatusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panthera_locomotion::StatusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panthera_locomotion::StatusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panthera_locomotion::StatusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panthera_locomotion::StatusResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panthera_locomotion::StatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89719d7b7249d89966a637c334f4a8dd";
  }

  static const char* value(const ::panthera_locomotion::StatusResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89719d7b7249d899ULL;
  static const uint64_t static_value2 = 0x66a637c334f4a8ddULL;
};

template<class ContainerAllocator>
struct DataType< ::panthera_locomotion::StatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panthera_locomotion/StatusResponse";
  }

  static const char* value(const ::panthera_locomotion::StatusResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panthera_locomotion::StatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool status\n"
"int64 speed\n"
"\n"
;
  }

  static const char* value(const ::panthera_locomotion::StatusResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panthera_locomotion::StatusResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatusResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panthera_locomotion::StatusResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panthera_locomotion::StatusResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANTHERA_LOCOMOTION_MESSAGE_STATUSRESPONSE_H
