// Generated by gencpp from file local_planner/Sonar.msg
// DO NOT EDIT!


#ifndef LOCAL_PLANNER_MESSAGE_SONAR_H
#define LOCAL_PLANNER_MESSAGE_SONAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace local_planner
{
template <class ContainerAllocator>
struct Sonar_
{
  typedef Sonar_<ContainerAllocator> Type;

  Sonar_()
    : back_l(0.0)
    , back_r(0.0)
    , left_b(0.0)
    , left_m(0.0)
    , left_f(0.0)
    , front_l(0.0)
    , front_r(0.0)
    , right_f(0.0)
    , right_m(0.0)
    , right_b(0.0)  {
    }
  Sonar_(const ContainerAllocator& _alloc)
    : back_l(0.0)
    , back_r(0.0)
    , left_b(0.0)
    , left_m(0.0)
    , left_f(0.0)
    , front_l(0.0)
    , front_r(0.0)
    , right_f(0.0)
    , right_m(0.0)
    , right_b(0.0)  {
  (void)_alloc;
    }



   typedef double _back_l_type;
  _back_l_type back_l;

   typedef double _back_r_type;
  _back_r_type back_r;

   typedef double _left_b_type;
  _left_b_type left_b;

   typedef double _left_m_type;
  _left_m_type left_m;

   typedef double _left_f_type;
  _left_f_type left_f;

   typedef double _front_l_type;
  _front_l_type front_l;

   typedef double _front_r_type;
  _front_r_type front_r;

   typedef double _right_f_type;
  _right_f_type right_f;

   typedef double _right_m_type;
  _right_m_type right_m;

   typedef double _right_b_type;
  _right_b_type right_b;





  typedef boost::shared_ptr< ::local_planner::Sonar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::local_planner::Sonar_<ContainerAllocator> const> ConstPtr;

}; // struct Sonar_

typedef ::local_planner::Sonar_<std::allocator<void> > Sonar;

typedef boost::shared_ptr< ::local_planner::Sonar > SonarPtr;
typedef boost::shared_ptr< ::local_planner::Sonar const> SonarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::local_planner::Sonar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::local_planner::Sonar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::local_planner::Sonar_<ContainerAllocator1> & lhs, const ::local_planner::Sonar_<ContainerAllocator2> & rhs)
{
  return lhs.back_l == rhs.back_l &&
    lhs.back_r == rhs.back_r &&
    lhs.left_b == rhs.left_b &&
    lhs.left_m == rhs.left_m &&
    lhs.left_f == rhs.left_f &&
    lhs.front_l == rhs.front_l &&
    lhs.front_r == rhs.front_r &&
    lhs.right_f == rhs.right_f &&
    lhs.right_m == rhs.right_m &&
    lhs.right_b == rhs.right_b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::local_planner::Sonar_<ContainerAllocator1> & lhs, const ::local_planner::Sonar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace local_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::local_planner::Sonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::local_planner::Sonar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::local_planner::Sonar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::local_planner::Sonar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_planner::Sonar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::local_planner::Sonar_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::local_planner::Sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f867769555dffd428a6a95bc8cdaae9c";
  }

  static const char* value(const ::local_planner::Sonar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf867769555dffd42ULL;
  static const uint64_t static_value2 = 0x8a6a95bc8cdaae9cULL;
};

template<class ContainerAllocator>
struct DataType< ::local_planner::Sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "local_planner/Sonar";
  }

  static const char* value(const ::local_planner::Sonar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::local_planner::Sonar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 back_l\n"
"float64 back_r\n"
"\n"
"float64 left_b\n"
"float64 left_m\n"
"float64 left_f\n"
"\n"
"float64 front_l\n"
"float64 front_r\n"
"\n"
"float64 right_f\n"
"float64 right_m\n"
"float64 right_b\n"
;
  }

  static const char* value(const ::local_planner::Sonar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::local_planner::Sonar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.back_l);
      stream.next(m.back_r);
      stream.next(m.left_b);
      stream.next(m.left_m);
      stream.next(m.left_f);
      stream.next(m.front_l);
      stream.next(m.front_r);
      stream.next(m.right_f);
      stream.next(m.right_m);
      stream.next(m.right_b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sonar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::local_planner::Sonar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::local_planner::Sonar_<ContainerAllocator>& v)
  {
    s << indent << "back_l: ";
    Printer<double>::stream(s, indent + "  ", v.back_l);
    s << indent << "back_r: ";
    Printer<double>::stream(s, indent + "  ", v.back_r);
    s << indent << "left_b: ";
    Printer<double>::stream(s, indent + "  ", v.left_b);
    s << indent << "left_m: ";
    Printer<double>::stream(s, indent + "  ", v.left_m);
    s << indent << "left_f: ";
    Printer<double>::stream(s, indent + "  ", v.left_f);
    s << indent << "front_l: ";
    Printer<double>::stream(s, indent + "  ", v.front_l);
    s << indent << "front_r: ";
    Printer<double>::stream(s, indent + "  ", v.front_r);
    s << indent << "right_f: ";
    Printer<double>::stream(s, indent + "  ", v.right_f);
    s << indent << "right_m: ";
    Printer<double>::stream(s, indent + "  ", v.right_m);
    s << indent << "right_b: ";
    Printer<double>::stream(s, indent + "  ", v.right_b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCAL_PLANNER_MESSAGE_SONAR_H
